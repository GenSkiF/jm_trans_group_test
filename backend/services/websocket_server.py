import json
import os
import base64
import asyncio
import websockets
import traceback
import logging
import time  # –º–æ–¥—É–ª—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –º–æ–¥—É–ª—å!)
from backend.core.database import (
    load_all_requests,
    save_request_to_db,
    add_user,
    get_user,
    deleteTask,
    init_db,
    get_request_from_db,
    check_password,
    list_vehicle_statuses,
    reconcile_statuses_for_request,
    reconcile_statuses_from_request,
    set_vehicle_status_text,
    toggle_vehicle_unloaded,
    all_unloaded_for_request,
    set_request_status_closed,
    clear_daily_status_texts,
    cleanup_unloaded_rows_older_than_48h
)
from backend.core.log_config import setup_logging
from pathlib import Path
import datetime as dt  # –º–æ–¥—É–ª—å datetime –ø–æ–¥ –∫–æ—Ä–æ—Ç–∫–∏–º –∏–º–µ–Ω–µ–º
from decimal import Decimal
import uuid  # –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
import datetime
session_token = str(uuid.uuid4())

setup_logging()
init_db()

ATTACH_DIR = Path(__file__).parent.parent.parent / "attachments"

connected_clients = set()

def _json_default(o):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è json.dumps:
    - date/datetime/time -> ISO-—Å—Ç—Ä–æ–∫–∏
    - Decimal -> float
    - –≤—Å—ë –ø—Ä–æ—á–µ–µ -> str (–∫–∞–∫ –∫—Ä–∞–π–Ω—è—è –º–µ—Ä–∞)
    """
    if isinstance(o, (dt.datetime, dt.date, dt.time)):
        return o.isoformat()
    if isinstance(o, Decimal):
        return float(o)
    try:
        return str(o)
    except Exception:
        return None

def _json_dumps_safe(message: dict) -> str:
    # ensure_ascii=False ‚Äî —á—Ç–æ–±—ã –≥—Ä—É–∑–∏–Ω—Å–∫–∏–π/—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–ª—Å—è –≤ \uXXXX
    return json.dumps(message, default=_json_default, ensure_ascii=False)

print("üü¢ –°–µ—Ä–≤–µ—Ä JM Trans Group –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8766")
logging.info("üü¢ –°–µ—Ä–≤–µ—Ä JM Trans Group –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8766")


async def broadcast(message, exclude_ws=None):
    data = _json_dumps_safe(message)
    for client in list(connected_clients):
        if client is exclude_ws:
            continue
        try:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if getattr(client, "closed", False):
                connected_clients.discard(client)
                continue
            await client.send(data)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É: {e}")
            try:
                await client.close()
            except Exception:
                pass
            connected_clients.discard(client)


async def handle_client(websocket):
    ip, port = websocket.remote_address
    logging.info(
        f"üü¢ ·Éô·Éö·Éò·Éî·Éú·É¢·Éò ·É®·Éî·Éî·É†·Éó·Éî·Éë·É£·Éö·Éò·Éê ‚Äî IP: {ip}, Port: {port}")
    connected_clients.add(websocket)

    try:
        async for message in websocket:
            try:
                data = json.loads(message)
                action = data.get("action")
                print("[SERVER] ‚è± –ü–û–õ–£–ß–ï–ù–û –û–¢ –ö–õ–ò–ï–ù–¢–ê:", time.time(), action)
                print(f"[SERVER RECEIVE] action={action} | data={data}")
                logging.info(f"[SERVER RECEIVE] action={action} | data={data}")

                if action == "ping":
                    await websocket.send(json.dumps({"action": "pong"}))

                elif action == "server_status":
                    await websocket.send(json.dumps({"action": "server_status", "status": "running"}))

                elif action == "add_request":
                    request_data = data.get("data")
                    if request_data:
                        try:
                            t0 = time.time()
                            print(f"[SERVER] [add_request] start: {t0:.6f}")

                            saved = save_request_to_db(request_data)  # ‚Üê –í–ê–ñ–ù–û: –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –° –£–ñ–ï –í–´–î–ê–ù–ù–´–ú id
                            if not saved or not saved.get("id"):
                                raise RuntimeError("save_request_to_db returned no id")

                            t1 = time.time()
                            print(f"[SERVER] [add_request] –ø–æ—Å–ª–µ save_request_to_db: {t1:.6f} (+{t1 - t0:.4f}s)")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –∏ –≤–µ—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                            await websocket.send(json.dumps({
                                "action": "new_request",
                                "status": "success",
                                "data": saved,
                                "message": "‚úÖ ·Éí·Éê·Éú·Éê·É™·ÉÆ·Éê·Éì·Éò ·É¨·Éê·É†·Éõ·Éê·É¢·Éî·Éë·Éò·Éó ·Éì·Éê·Éî·Éõ·Éê·É¢·Éê"
                            }))
                            await broadcast({"action": "new_request", "data": saved}, exclude_ws=websocket)
                            # >>> STATUSES: reconcile and broadcast (–ü–û –ö–ê–ñ–î–û–ú–£ –í–û–î–ò–¢–ï–õ–Æ)
                            try:
                                req_for_status = saved or request_data or {}
                                reconcile_statuses_from_request(req_for_status)
                                rows = list_vehicle_statuses()
                                await broadcast({"action": "statuses_sync", "data": rows})
                                logging.info(f"[statuses] reconcile_from_request id={req_for_status.get('id')}")
                            except Exception:
                                logging.exception("[statuses] reconcile after add_request failed")


                            t2 = time.time()
                            print(f"[SERVER] [add_request] –ø–æ—Å–ª–µ websocket.send: {t2:.6f} (+{t2 - t1:.4f}s, –æ—Ç –Ω–∞—á–∞–ª–∞: +{t2 - t0:.4f}s)")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
                            await websocket.send(json.dumps({
                                "action": "new_request",
                                "status": "error",
                                "message": "‚ùå ·Éí·Éê·Éú·Éê·É™·ÉÆ·Éê·Éì·Éò·É° ·Éì·Éê·Éõ·Éê·É¢·Éî·Éë·Éò·É° ·É®·Éî·É™·Éì·Éù·Éõ·Éê"
                            }))

                elif action == "edit_request":
                    request_id = data.get("id")
                    new_data   = (data.get("data") or {})  # dict –∏–ª–∏ {}
                    editor = (
                        (new_data or {}).get("last_editor")
                        or data.get("last_editor")
                        or data.get("editor")
                    )

                    if request_id and isinstance(new_data, dict) and new_data:
                        try:
                            # –í—Å–µ–≥–¥–∞ –ø—Ä–∏–≤–æ–¥–∏–º request_id –∫ int
                            try:
                                rid = int(str(request_id).strip())
                            except Exception:
                                await websocket.send(json.dumps({
                                    "action": "edit_request",
                                    "status": "fail",
                                    "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∑–∞—è–≤–∫–∏"
                                }))
                                return

                            req = get_request_from_db(rid)
                            if not req:
                                await websocket.send(json.dumps({
                                    "action": "edit_request",
                                    "status": "fail",
                                    "message": "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                                }))
                                return

                            # ‚úÖ –ñ–Å–°–¢–ö–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º id –∏ –Ω–µ –¥–∞—ë–º –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å
                            new_data.pop("id", None)
                            req.update(new_data)
                            req["id"] = rid

                            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏
                            if editor:
                                req["last_editor"] = editor
                            req["last_edit_ts"] = time.strftime("%Y-%m-%d %H:%M:%S")

                            saved = save_request_to_db(req)
                            # 1) –Ø–≤–Ω—ã–π ACK –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
                            await websocket.send(json.dumps({
                                "action": "edit_request",
                                "status": "success",
                                "id": rid,
                                "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞"
                            }))

                            # 2) –®–ª—ë–º —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é
                            updated = get_request_from_db(rid) or saved or req
                            if editor:
                                updated["last_editor"] = editor
                            await broadcast({"action": "request_updated", "data": updated})
                            # >>> STATUSES: –∏–∑ –∑–∞—è–≤–∫–∏, —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –¥–∞—Ç—ã –∫ –∫–∞–∂–¥–æ–º—É –≤–æ–¥–∏—Ç–µ–ª—é
                            try:
                                reconcile_statuses_from_request(updated)
                                rows = list_vehicle_statuses()
                                await broadcast({"action": "statuses_sync", "data": rows})
                                logging.info(f"[statuses] reconcile_from_request id={updated.get('id')}")
                            except Exception:
                                logging.exception("[statuses] reconcile after edit_request failed")


                            logging.info("Broadcasted request_updated for id=%s", rid)

                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
                            await websocket.send(json.dumps({
                                "action": "edit_request",
                                "status": "error",
                                "message": "–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"
                            }))

                elif action == "delete_request":
                    task_id = data.get("id")
                    if task_id:
                        try:
                            deleteTask(task_id)
                            await broadcast({"action": "trigger_sync"}, exclude_ws=websocket)
                            await websocket.send(json.dumps({
                                "action": "response",
                                "status": "success",
                                "message": "–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞"
                            }))
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
                            await websocket.send(json.dumps({"error": "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"}))

                # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                elif action == "register":
                    username = data.get("username")
                    password = data.get("password")
                    role = data.get("role", "user")

                    if not username or not password:
                        await websocket.send(json.dumps({
                            "action": "register",
                            "status": "fail",
                            "message": "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å"
                        }))
                        return

                    success = add_user(username, password, role)
                    if success:
                        await websocket.send(json.dumps({
                            "action": "register",
                            "status": "success",
                            "message": "‚úÖ ·É†·Éî·Éí·Éò·É°·É¢·É†·Éê·É™·Éò·Éê ·É¨·Éê·É†·Éõ·Éê·É¢·Éî·Éë·Éò·Éó ·É®·Éî·É°·É†·É£·Éö·Éì·Éê"
                        }))
                    else:
                        await websocket.send(json.dumps({
                            "action": "register",
                            "status": "fail",
                            "message": "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
                        }))


                # --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                elif action == "auth":
                    username = data.get("username")
                    password = data.get("password")
                    user = get_user(username)
                    print(f"USER FROM DB: {user}")
                    if user and check_password(password, user["password"]):
                        import uuid
                        session_token = str(uuid.uuid4())
                        await websocket.send(json.dumps({
                            "action": "auth",
                            "status": "success",
                            "role": user.get("role", "user"),
                            "username": user["username"],
                            "session_token": session_token
                        }))
                    else:
                        await websocket.send(json.dumps({
                            "action": "auth",
                            "status": "fail",
                            "message": "‚ùå ·Éõ·Éù·Éõ·ÉÆ·Éõ·Éê·É†·Éî·Éë·Éî·Éö·Éò ·Éê·É† ·Éõ·Éù·Éò·É´·Éî·Éë·Éú·Éê ·Éê·Éú ·Éû·Éê·É†·Éù·Éö·Éò ·Éê·É†·Éê·É°·É¨·Éù·É†·Éò·Éê"
                        }))

                elif action == "resume_session":
                    token = data.get("token")
                    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ –≤—ã –µ—ë –¥–µ–ª–∞–µ—Ç–µ
                    # –î–ª—è MVP –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω—è—Ç—å –ª—é–±–æ–π —Ç–æ–∫–µ–Ω –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π:
                    await websocket.send(json.dumps({
                        "action": "resume_session",
                        "status": "success"
                    }))

                # --- –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (attach, comment, update_request, sync_all) ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

                elif action == "file":
                    task_id = str(data.get("task_id"))      # –í–°–ï–ì–î–ê str!
                    filename = data.get("filename")
                    filedata = data.get("filedata")
                    if not all([task_id, filename, filedata]):
                        print("UPLOAD ERROR: missing params")
                        return

                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    os.makedirs(f"attachments/task_{task_id}", exist_ok=True)
                    file_path = f"attachments/task_{task_id}/{filename}"
                    with open(file_path, "wb") as f:
                        f.write(base64.b64decode(filedata))
                    print(f"[SERVER] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
                    req = get_request_from_db(task_id)
                    if req is not None:
                        if "attachments" not in req or not isinstance(req["attachments"], list):
                            req["attachments"] = []
                        if filename not in req["attachments"]:
                            req["attachments"].append(filename)
                        saved = save_request_to_db(req)
                        rid = (saved or req).get("id")
                        updated = get_request_from_db(rid) or saved or req
                        await broadcast({"action": "request_updated", "data": updated})

                
                elif action == "upload_file":
                    try:
                        request_id = str(data.get("request_id"))
                        filename = data.get("filename")
                        content_base64 = data.get("content_base64")
                        file_type = data.get("file_type", "driver_file")  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è

                        if not all([request_id, filename, content_base64]):
                            await websocket.send(json.dumps({
                                "action": "upload_file",
                                "status": "error",
                                "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"
                            }))
                            return

                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
                        file_bytes = base64.b64decode(content_base64)
                        save_dir = f"attachments/request_{request_id}"
                        os.makedirs(save_dir, exist_ok=True)
                        safe_name = filename.replace("/", "_").replace("\\", "_")
                        file_path = os.path.join(save_dir, safe_name)
                        with open(file_path, "wb") as f:
                            f.write(file_bytes)

                        # –§–æ—Ä–º–∏—Ä—É–µ–º url (–ø—É—Å—Ç—å –æ—Ç–¥–∞—ë—Ç—Å—è –∫–∞–∫ /files/request_id/filename —á–µ—Ä–µ–∑ nginx/flask)
                        url = f"/files/request_{request_id}/{safe_name}"

                        await websocket.send(json.dumps({
                            "action": "upload_file",
                            "status": "ok",
                            "file": {
                                "name": filename,
                                "url": url
                            }
                        }))
                    except Exception as e:
                        await websocket.send(json.dumps({
                            "action": "upload_file",
                            "status": "error",
                            "error": str(e)
                        }))

                elif action == "download_file":
                    try:
                        task_id = str(data.get("task_id"))
                        filename = data.get("filename")
                        paths = [
                            f"attachments/task_{task_id}/{filename}",
                            f"attachments/request_{task_id}/{filename}"
                        ]
                        found = False
                        for file_path in paths:
                            if os.path.exists(file_path):
                                with open(file_path, "rb") as f:
                                    filedata = base64.b64encode(f.read()).decode("utf-8")
                                await websocket.send(json.dumps({
                                    "action": "download_file",
                                    "filename": filename,
                                    "filedata": filedata
                                }))
                                found = True
                                break
                        if not found:
                            await websocket.send(json.dumps({
                                "action": "download_file",
                                "filename": filename,
                                "filedata": None,
                                "error": "File not found"
                            }))
                    except Exception as e:
                        await websocket.send(json.dumps({
                            "action": "download_file",
                            "filename": filename,
                            "filedata": None,
                            "error": f"Server error: {e}"
                        }))

                elif action == "add_comment":
                    task_id = data.get("task_id")
                    comment = data.get("comment")
                    if not (task_id and comment):
                        await websocket.send(json.dumps({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"}))
                        return
                    all_requests = load_all_requests()
                    for req in all_requests:
                        if str(req.get("id")) == str(task_id):
                            comments = req.get("comments", [])
                            comments.append(comment)
                            req["comments"] = comments
                            save_request_to_db(req)
                            break
                    await websocket.send(json.dumps({"action": "add_comment", "status": "success"}))
                    # req ‚Äî —ç—Ç–æ –∑–∞—è–≤–∫–∞ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
                    await broadcast({
                        "action": "add_comment",
                        "task_id": task_id,
                        "comment": comment
                    })
                    print("[SERVER] ‚è± –û–¢–ü–†–ê–í–õ–ï–ù–û –ö–õ–ò–ï–ù–¢–£:",
                          time.time(), action)

                elif action == "update_request":
                    request_data = data.get("data")
                    if not request_data or not request_data.get("id"):
                        await websocket.send(json.dumps({"action": "update_request", "status": "error", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}))
                        return
                    try:
                        print(
                            f"[DEBUG] server.py update_request: id={request_data.get('id')}, drivers={request_data.get('drivers')}")
                        saved = save_request_to_db(request_data)
                        await websocket.send(json.dumps({"action": "update_request", "status": "success"}))
                        # –±–µ—Ä—ë–º ¬´—Å–≤–µ–∂—É—é¬ª –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                        rid = (saved or request_data).get("id")
                        updated = get_request_from_db(rid) or saved or request_data
                        await broadcast({"action": "request_updated", "data": updated})

                        # >>> STATUSES: reconcile and broadcast (–ø–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
                        try:
                            reconcile_statuses_from_request(updated)
                            rows = list_vehicle_statuses()
                            await broadcast({"action": "statuses_sync", "data": rows})
                            logging.info(f"[statuses] reconcile_from_request id={updated.get('id')}")
                        except Exception:
                            logging.exception("[statuses] reconcile after update_request failed")
                                                                        
                    except Exception as e:
                        import traceback
                        traceback.print_exc()
                        await websocket.send(json.dumps({"action": "update_request", "status": "error", "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}"}))

                elif action == "unknown":
                    await websocket.send(json.dumps({
                        "action": "error",
                        "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
                    }))
                    
                elif action == "sync_all":
                    all_data = load_all_requests()
                    await websocket.send(_json_dumps_safe({"action": "sync_all", "data": all_data}))

                elif action == "statuses_sync":
                    try:
                        rows = list_vehicle_statuses()
                        await websocket.send(_json_dumps_safe({"action": "statuses_sync", "data": rows}))
                    except Exception as e:
                        await websocket.send(_json_dumps_safe({"action": "statuses_sync", "status": "error", "message": str(e)}))

                elif action == "statuses_set_text":
                    rid = int(data.get("request_id") or 0)
                    vehicle = (data.get("vehicle_number") or "").strip()
                    text = data.get("text") or ""
                    if not (rid and vehicle):
                        await websocket.send(json.dumps({"action": "statuses_set_text", "status": "error", "message": "bad params"}))
                    else:
                        set_vehicle_status_text(rid, vehicle, text)
                        rows = list_vehicle_statuses()
                        await broadcast({"action": "statuses_sync", "data": rows})
                elif action == "set_request_status":
                    rid = int(data.get("id") or 0)
                    status = data.get("status") or (data.get("data") or {}).get("status")
                    # –ï—Å–ª–∏ –≤—Å–µ –º–∞—à–∏–Ω—ã –ø–æ –∑–∞—è–≤–∫–µ –≤—ã–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—É—Å "closed"
                    try:
                        if str(status).lower().strip() != 'closed' and all_unloaded_for_request(rid):
                            status = 'closed'
                    except Exception as _e:
                        logging.error(f"[statuses] enforce closed on set_request_status failed: {_e}")
                    if not rid or not status:
                        await websocket.send(json.dumps({
                            "action": "request_updated",
                            "status": "error",
                            "message": "bad params"
                        }))
                    else:
                        try:
                            req = get_request_from_db(rid) or {"id": rid}
                            # –ü–∏—à–µ–º —Å—Ç–∞—Ç—É—Å –≤ JSON –∑–∞—è–≤–∫–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≤ save_request_to_db)
                            d = dict(req)
                            d['status'] = status
                            save_request_to_db(d)
                            updated = get_request_from_db(rid)
                            if updated:
                                await broadcast({"action": "request_updated", "data": updated})
                        except Exception as e:
                            await websocket.send(json.dumps({"action": "request_updated", "status": "error", "message": str(e)}))

                elif action == "statuses_toggle_unloaded":
                    rid = int(data.get("request_id") or 0)
                    vehicle = (data.get("vehicle_number") or "").strip()
                    unloaded = data.get("unloaded", None)  # –º–æ–∂–µ—Ç –±—ã—Ç—å True/False/None
                    unload_date = data.get("unload_date") or None
                    if isinstance(unload_date, str) and len(unload_date) >= 10:
                        unload_date = unload_date[:10]
                    toggle_vehicle_unloaded(rid, vehicle, unloaded, unload_date)

                    # –µ—Å–ª–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≥–∞–ª–æ—á–∫—É ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ª–∏ –∑–∞—è–≤–∫–∞ —Ü–µ–ª–∏–∫–æ–º
                    try:
                        if unloaded is True and all_unloaded_for_request(rid):
                            set_request_status_closed(rid)
                            updated = get_request_from_db(rid)
                            if updated:
                                await broadcast({"action": "request_updated", "data": updated})
                    except Exception as e:
                        logging.error(f"[statuses] auto-close failed: {e}")

                    rows = list_vehicle_statuses()
                    await broadcast({"action": "statuses_sync", "data": rows})

                elif action == "logout":
                    await websocket.close(code=1000, reason="Logout")
                    continue

            except Exception as e:
                logging.error("üìõ ·É®·Éî·É™·Éì·Éù·Éõ·Éê ·É®·Éî·É¢·Éß·Éù·Éë·Éò·Éú·Éî·Éë·Éò·É° ·Éì·Éê·Éõ·É£·É®·Éê·Éï·Éî·Éë·Éò·É°·Éê·É°: %s", e)
                await websocket.send(json.dumps({"error": "üí• ·É°·Éî·É†·Éï·Éî·É†·Éò·É° ·É®·Éò·Éì·Éê ·É®·Éî·É™·Éì·Éù·Éõ·Éê"}))
    except websockets.exceptions.ConnectionClosed:
        logging.info("üîå ·Éô·Éö·Éò·Éî·Éú·É¢·Éò ·Éí·Éê·Éó·Éò·É®·É£·Éö·Éò·Éê ‚Äî IP: %s, Port: %s", ip, port)
    finally:
        connected_clients.discard(websocket)

def _extract_vehicles_and_load_date(req: dict):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –¢–°, –¥–∞—Ç–∞_–∑–∞–≥—Ä—É–∑–∫–∏_DD-MM-YYYY|None) –∏–∑ –∑–∞—è–≤–∫–∏."""
    vehicles = []
    for d in (req.get('drivers') or []):
        for key in ('stateNumber', 'vehicleNumber', 'plate', 'carNumber', 'number', 'tsNumber'):
            v = d.get(key)
            if v:
                vehicles.append(str(v).strip())
                break
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –Ω–µ–ø—É—Å—Ç—ã–µ
    vehicles = sorted({v for v in vehicles if v})

    # –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –∏–∑ loading_dates (–∏–ª–∏ None)
    load_date = None
    for ld in (req.get('loading_dates') or []):
        date = (ld.get('date') or ld.get('loading_date') or ld.get('day') or '').strip()
        if date:
            load_date = date[:10]  # DD-MM-YYYY
            break
    return vehicles, load_date

async def _run_midnight_clear_and_broadcast():
    """–ñ–¥—ë–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–π –ø–æ–ª—É–Ω–æ—á–∏, —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ç—É—Å –¥–Ω—è –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."""
    while True:
        now = dt.datetime.now()
        tomorrow = now + dt.timedelta(days=1)
        midnight = dt.datetime.combine(tomorrow.date(), dt.time(0, 0, 0))
        await asyncio.sleep((midnight - now).total_seconds())
        try:
            clear_daily_status_texts()
            rows = list_vehicle_statuses()
            await broadcast({"action": "statuses_sync", "data": rows})
        except Exception as e:
            logging.error(f"[statuses] midnight clear failed: {e}")


async def _run_periodic_cleanup_48h():
    """–†–∞–∑ –≤ 30 –º–∏–Ω—É—Ç —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ä—à–µ 48—á."""
    while True:
        try:
            cleanup_unloaded_rows_older_than_48h()
        except Exception as e:
            logging.error(f"[statuses] 48h cleanup failed: {e}")
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç


async def main():
    logging.info("·É°·Éî·É†·Éï·Éî·É†·Éò·É° ·Éí·Éê·É®·Éï·Éî·Éë·Éê...")
    async with websockets.serve(handle_client, "0.0.0.0", 8766):
        # —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
        asyncio.create_task(_run_midnight_clear_and_broadcast())
        asyncio.create_task(_run_periodic_cleanup_48h())
        # initial daily clear and statuses snapshot
        try:
            clear_daily_status_texts()
            rows = list_vehicle_statuses()
            await broadcast({"action": "statuses_sync", "data": rows})
        except Exception as e:
            logging.error(f"[statuses] initial clear/sync failed: {e}")
        await asyncio.Future()


if __name__ == "__main__":
    asyncio.run(main())
