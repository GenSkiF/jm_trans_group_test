// frontend/js/auth.js
import { WebSocketService } from './services/api.js';

export class AuthService {
    static generatedCode = null;
    static currentUser = null;

    static async init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        const token = localStorage.getItem("jm_session_token");
        if (token) {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ WS
            const resumed = await this.resumeSession(token);
            if (resumed) return resumed;

            // –ú—è–≥–∫–∏–π —Ä–µ–∂–∏–º: –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑-–∑–∞ –∫—Ä–∞—Ç–∫–∏—Ö —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ–µ–≤.
            // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬´–≤–Ω—É—Ç—Ä–∏¬ª –∏ –∂–¥—ë–º –∞–≤—Ç–æ–≤–æ—Ä–∫—Ñ–ª–æ—É —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–∞.
            const username = localStorage.getItem("jm_session_username") || "";
            const role = localStorage.getItem("jm_session_role") || "user";
            this.currentUser = { username, role, token };
            return this.currentUser;
        }
        return false;
    }

    static async login(username, password) {
        try {
            const response = await WebSocketService.sendAndWait({
                action: "auth",
                username,
                password
            });

            if (response.status === "success") {
                const role = response.role || "user";
                this.currentUser = { username, role, token: response.session_token };

                localStorage.setItem("jm_session_token", response.session_token);
                localStorage.setItem("jm_session_username", username);
                localStorage.setItem("jm_session_role", role); // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö resume
                return this.currentUser;
            } else {
                throw new Error(response.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
            }
        } catch (error) {
            console.error("Auth error:", error);
            throw error;
        }
    }

    static async register(userData) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        if (userData.password !== userData.password2) {
            throw new Error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        }

        try {
            const response = await WebSocketService.sendAndWait({
                action: "register",
                ...userData,
                role: "user"
            });

            if (response.status === "success") {
                return response;
            } else {
                throw new Error(response.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
            }
        } catch (error) {
            console.error("Registration error:", error);
            throw error;
        }
    }

    static async sendConfirmationCode(phone) {
        this.generatedCode = Math.floor(1000 + Math.random() * 9000);
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS
        return this.generatedCode;
    }

    static async resumeSession(token) {
        try {
            const response = await WebSocketService.sendAndWait({ action: "resume_session", token });

            if (response?.status === "success") {
                const username = localStorage.getItem("jm_session_username") || this.currentUser?.username || "";
                const role = response.role || localStorage.getItem("jm_session_role") || "user";

                this.currentUser = { username, role, token };
                return this.currentUser;
            } else {
                // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–±–æ—è/–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
                // –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –∫–æ–¥—É, —á—Ç–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏.
                return false;
            }
        } catch (error) {
            // –í —Å–ª—É—á–∞–µ —Ç–∞–π–º–∞—É—Ç–∞/–æ–±—Ä—ã–≤–∞ ‚Äî –ù–ï –¥–µ–ª–∞–µ–º logout. –î–∞–¥–∏–º WS –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å resume –Ω–∞ onopen.
            return false;
        }
    }



    static logout() {
        this.currentUser = null;
        localStorage.removeItem("jm_session_token");
        localStorage.removeItem("jm_session_username");
        WebSocketService.send({ action: "logout" });
    }

    static logout() {
        // 1. –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        AuthService.currentUser = null;

        // 2. –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
        localStorage.removeItem("jm_session_token");
        localStorage.removeItem("jm_session_username");

        // 3. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π WebSocket ‚Äî –∑–∞–∫—Ä—ã—Ç—å –µ–≥–æ
        if (window.ws && typeof window.ws.close === 'function') {
            window.ws.close();
            window.ws = null;
        }

        // 4. –í–µ—Ä–Ω—É—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å–∫—Ä—ã—Ç—å main-section
        const mainSection = document.getElementById('main-section');
        const authBlock = document.getElementById('auth-block');
        if (mainSection) mainSection.style.display = 'none';
        if (authBlock) authBlock.style.display = '';
    }
}

